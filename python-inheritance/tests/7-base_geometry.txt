# 7_base_geometry_test.txt

##############
# BaseGeometry class unit tester
##############

This is a unit tester for the BaseGeometry class in the 7-base_geometry module.

First, import the BaseGeometry class from the module.

::

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

##############
# Valid Tests
##############

::

    >>> print(bg.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
    <bound method BaseGeometry.area of <7-base_geometry.BaseGeometry 
    object at...>>


::

Testing the area method, which should raise an exception.

::
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Testing the integer_validator method with valid input.

::

    >>> bg.integer_validator("age", 5)

##############
# Invalid Tests
##############

Testing the integer_validator method with a string instead of an integer.

::

    >>> bg.integer_validator("age", "five")
    Traceback (most recent call last):
    TypeError: age must be an integer

Testing the integer_validator method with a negative integer.

::

    >>> bg.integer_validator("age", -5)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

Testing the integer_validator method with zero.

::

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0

::

    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::

    >>> bg.integer_validator("age",(4))